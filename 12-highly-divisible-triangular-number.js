//Enunciado
/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

function triangleNumber(number) {
	let acc = 0;
	while (number > 0) {
		acc += number;
		--number;
	}
	return acc;
}

function numberOfDivisors(number) {
	let divisors = 1;
	const isOdd = (number%2 !== 0);
	
	if (isOdd) {
		for (let i = 1; i <= number/2; i+=2) {
			if (number % i === 0) divisors++;
		}
	} else {
		for (let i = 1; i <= number/2; i++) {
		if (number % i === 0) divisors++;
	}
	}
	return divisors;
}

function firstTriangularNumberToHaveOverNDivisors(n) {
	for (let i = 1; ; i++) {
		let tNumber = triangleNumber(i);
		if (tNumber % 100 === 0) console.log(tNumber);
		if (numberOfDivisors(tNumber) > n) break;
	}
	return tNumber;
}
// console.log(triangleNumber(100));
// console.log(numberOfDivisors(28));
// console.log(firstTriangularNumberToHaveOverNDivisors(1000));

function fac(number) {
	const factors = [];
	let divisor = 2;
	while (number != 1) {
		const r = number / divisor;
		if (r % 1 === 0) {
			factors.push(divisor);
			number = r;
		} else {
			divisor++;
		}
	}
	return factors;
}

function getOccurence(arr, value) {
	return (arr.filter(n => n === value)).length;
}

function expoentOfFactors(arr) {
	const result = [];

}

console.log(getOccurence([1,1,3,3,4,1,9], 1));
// console.log(fac(10))